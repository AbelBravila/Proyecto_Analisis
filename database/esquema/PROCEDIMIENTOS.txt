--------------------PROCEDIMIENTO ENCRIPTACION-------------------------
create PROCEDURE sp_EncriptarContrasena
    @correo VARCHAR(255),
    @contrasena VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_usuario INT;
    DECLARE @dato_anterior varbinary(8000);
    DECLARE @contraseñaNueva varbinary(8000);

    -- Obtener el ID del usuario y la contraseña anterior
    SELECT @id_usuario = id_usuario, @dato_anterior = contrasena
    FROM usuario
    WHERE correo = @correo;

    -- Encriptar la nueva contraseña antes de actualizar
    SET @contraseñaNueva = ENCRYPTBYPASSPHRASE('$Veronica25$', @contrasena);

    -- Actualizar la contraseña del usuario
    UPDATE usuario
    SET contrasena = @contraseñaNueva
    WHERE correo = @correo;

    -- Insertar registro en la bitacora
    INSERT INTO bitacora (accion, fecha_registro, dato_anterior, dato_nuevo, id_usuario)
    VALUES ('Recuperacion de contraseña Temporal', GETDATE(), @dato_anterior, @contraseñaNueva, @id_usuario);
END
select * from bitacora;
/************	CREACIÓN DE PROCEDIMIENTO DESENCRIPTAR *******/
CREATE PROCEDURE sp_ObtenerUsuarioContrasena
    @correo VARCHAR(255)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        id_usuario, 
        nombre_usuario, 
        correo,
        estado,
		intentos,
temporal,
        CONVERT(VARCHAR(100), DECRYPTBYPASSPHRASE('$Veronica25$', contrasena)) AS contrasena_desencriptada
    FROM usuario
    WHERE correo = @correo;
END;
--------------------------CAMBIAR CONTRASEÑA----------------------
CREATE PROCEDURE sp_CambiarContrasena
    @id_usuario INT,                
    @nueva_contrasena VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @contrasena_anterior_encriptada VARBINARY(8000);
    DECLARE @contrasena_anterior_desencriptada VARCHAR(100);
    DECLARE @contrasena_encriptada VARBINARY(8000);
    DECLARE @existe_similitud INT = 0;
    
    -- Recorremos todas las contraseñas anteriores del usuario
    DECLARE contrasena_cursor CURSOR FOR
    SELECT dato_nuevo
    FROM bitacora
    WHERE id_usuario = @id_usuario
    AND accion = 'Cambio de contraseña'
    ORDER BY fecha_registro DESC;

    OPEN contrasena_cursor;

    FETCH NEXT FROM contrasena_cursor INTO @contrasena_anterior_encriptada;

    -- Iteramos sobre todas las contraseñas anteriores
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Desencriptamos la contraseña anterior iterada
        SET @contrasena_anterior_desencriptada = CONVERT(VARCHAR(100), DECRYPTBYPASSPHRASE('$Veronica25$', @contrasena_anterior_encriptada));

        -- Verificamos con soundex la contraseña anterior con la nueva
        IF SOUNDEX(@nueva_contrasena) = SOUNDEX(@contrasena_anterior_desencriptada)
        BEGIN
            -- Si encontramos similitud, actualizamos la variable y salimos del ciclo
            SET @existe_similitud = 1;
            BREAK;  
        END

        -- Obtenemos la siguiente contraseña anterior
        FETCH NEXT FROM contrasena_cursor INTO @contrasena_anterior_encriptada;
    END

    CLOSE contrasena_cursor;
    DEALLOCATE contrasena_cursor;

    -- Si encontramos una similitud, abortamos el cambio
    IF @existe_similitud = 1
    BEGIN
        SELECT 'La nueva contraseña no puede ser similar a una contraseña anterior.' AS mensaje;
        RETURN;
    END

    -- Si no hay, encriptamos la nueva contraseña y actualizamos el usuario
    SET @contrasena_encriptada = ENCRYPTBYPASSPHRASE('$Veronica25$', @nueva_contrasena);

    UPDATE usuario
    SET contrasena = @contrasena_encriptada, temporal='0'	
    WHERE id_usuario = @id_usuario;

    -- Insertamos el cambio de contraseña en la tabla bitacora
    INSERT INTO bitacora (accion, fecha_registro, dato_anterior, dato_nuevo, id_usuario)
    VALUES ('Cambio de contraseña', GETDATE(), @contrasena_anterior_encriptada, @contrasena_encriptada, @id_usuario);

    SELECT 'Contraseña cambiada correctamente.' AS mensaje;
END;

------para probar--------------
EXEC sp_CambiarContrasena 
    @id_usuario = 1, 
    @nueva_contrasena = 'Culebrin1';


-----------------------REGISTRAR CON CONTRASEÑA ENCRIPTADA---------------
create PROCEDURE sp_RegistrarUsuarioConContrasenaEncriptada
    @codigo VARCHAR(50),
    @nombre VARCHAR(100),
    @correo_u VARCHAR(255),
    @numero VARCHAR(20),
    @contrasenaTemporal VARCHAR(100), 
	@respuesta NVARCHAR(100), 
    @estado CHAR(1), 
    @id_nivel INT, 
    @id_pregunta INT, 
    @intentos INT, 
    @temporal NVARCHAR(100), 
    @dias INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @contraseñaEncriptada VARBINARY(8000);

    -- Encriptar la contraseña temporal
    SET @contraseñaEncriptada = ENCRYPTBYPASSPHRASE('$Veronica25$', @contrasenaTemporal);

    -- Insertar usuario y obtener el ID generado
    INSERT INTO usuario (codigo_usuario, nombre_usuario, correo, telefono, contrasena, respuesta_pregunta, estado, id_nivel, id_pregunta, intentos, temporal, dias)
    VALUES (@codigo, @nombre, @correo_u, @numero, @contraseñaEncriptada, @respuesta, @estado , @id_nivel , @id_pregunta, @intentos, @temporal, @dias);

    DECLARE @id_usuario INT = SCOPE_IDENTITY();

    -- Insertar registro en la bitácora
    INSERT INTO bitacora (accion, fecha_registro, dato_anterior, dato_nuevo, id_usuario)
    VALUES ('Registro de usuario con contraseña encriptada', GETDATE(), NULL, @contraseñaEncriptada, @id_usuario);
END;
-----------------VERIFICAR CAMBIO CONTRASEÑA ----------------
create PROCEDURE VerificarCambioContrasena 
    @id_usuario INT
AS
BEGIN
    DECLARE @fecha_ultimo_cambio DATETIME;
    DECLARE @dias_permitidos INT;
    DECLARE @dias_transcurridos INT;
	DECLARE @requiere_cambio bit;

    SELECT TOP 1 @fecha_ultimo_cambio = fecha_registro
    FROM bitacora
    WHERE id_usuario = @id_usuario
    ORDER BY fecha_registro DESC;

    SELECT @dias_permitidos = dias
    FROM usuario
    WHERE id_usuario = @id_usuario;

    IF @fecha_ultimo_cambio IS NULL
    BEGIN
        SET @requiere_cambio = 1;
        RETURN;
    END
 
    SET @dias_transcurridos = DATEDIFF(DAY, @fecha_ultimo_cambio, GETDATE());

    IF @dias_transcurridos >= @dias_permitidos
        SET @requiere_cambio = 1; 
		ELSE
        SET @requiere_cambio = 0; 

		select @requiere_cambio as cambio
END;
-----------------ACTUALIZAR ESQUEMA PRODUCTO---------------------
CREATE PROCEDURE sp_actualizar_esquema_producto
    @id_esquema_producto INT,
    @codigo_producto NVARCHAR(15),
    @nombre_producto NVARCHAR(100),
    @descripcion NVARCHAR(100)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM esquema_producto WHERE id_esquema_producto = @id_esquema_producto)
    BEGIN
        UPDATE esquema_producto
        SET
            codigo_producto = @codigo_producto,
            nombre_producto = @nombre_producto,
            descripcion = @descripcion,
            fecha_creacion = GETDATE()  
        WHERE id_esquema_producto = @id_esquema_producto;
    END
    ELSE
    BEGIN
        RAISERROR('Producto no encontrado con el ID especificado.', 16, 1);
    END
END
-----------------CAMBIAR ESTADO ESQUEMA PRODUCTO---------------------
CREATE PROCEDURE sp_cambiarEstadoEsquemaProducto
    @id_esquema_producto INT
AS
BEGIN
    UPDATE esquema_producto
    SET estado = 'I'
    WHERE id_esquema_producto = @id_esquema_producto;
END
-----------------INSERTAR ESQUEMA PRODUCTO---------------------
CREATE PROCEDURE sp_Insert_Esquema_Producto
    @codigo_producto NVARCHAR(15),
    @nombre_producto NVARCHAR(100),
    @descripcion NVARCHAR(100)
AS
BEGIN
    INSERT INTO esquema_producto (codigo_producto, nombre_producto, descripcion, fecha_creacion, estado)
    VALUES (@codigo_producto, @nombre_producto, @descripcion, GETDATE(), 'A')
END
-----------------INSERTAR ESTANTERIA---------------------
CREATE PROCEDURE sp_InsertarEstanteria
    @cod_estanteria VARCHAR(50),
    @pasillo INT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

      
        IF EXISTS (SELECT 1 FROM estanteria WHERE codigo_estanteria = @cod_estanteria)
        BEGIN
            PRINT 'El codigo de la estanteria ya existe. No se puede insertar duplicado.';
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM pasillo WHERE id_pasillo = @pasillo)
        BEGIN
            PRINT 'El pasillo especificado no existe. Verifique el ID del pasillo.';
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO estanteria (codigo_estanteria, id_pasillo, estado)
        VALUES (@cod_estanteria, @pasillo, 'A');

        PRINT 'Estanteria insertada exitosamente.';

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH

        PRINT 'Ocurrio un error al intentar insertar la estanteria.';
        ROLLBACK TRANSACTION;
    END CATCH
END
-----------------INSERTAR PASILLO---------------------
CREATE PROCEDURE sp_InsertarPasillo
    @cod_pasillo VARCHAR(50)
AS
BEGIN

    IF EXISTS (SELECT 1 FROM pasillo WHERE codigo_pasillo = @cod_pasillo)
    BEGIN
        PRINT 'El c digo del pasillo ya existe. No se puede insertar duplicado.'
        RETURN
    END

    INSERT INTO pasillo (codigo_pasillo, estado)
    VALUES (@cod_pasillo, 'A')

    PRINT 'Pasillo insertado exitosamente.'
END

/*------------------ ALVARO DEVOLUCIONES ----------------------*/


CREATE OR ALTER PROCEDURE sp_RegistrarDevolucion
    @id_compra INT,
    @ProductosDevolver NVARCHAR(MAX) -- JSON con productos y cantidades
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @id_devolucion INT;
    DECLARE @ErrorCount INT = 0;
    DECLARE @MensajesResultado TABLE (Mensaje NVARCHAR(500));
    
    BEGIN TRY
        -- Crear tabla temporal para los productos a devolver
        CREATE TABLE #ProductosDevolucion (
            nombre_producto NVARCHAR(100),
            cantidad_devolver INT
        );
        
        -- Insertar datos desde JSON
        INSERT INTO #ProductosDevolucion (nombre_producto, cantidad_devolver)
        SELECT nombre_producto, cantidad_devolver
        FROM OPENJSON(@ProductosDevolver)
        WITH (
            nombre_producto NVARCHAR(100) '$.nombre_producto',
            cantidad_devolver INT '$.cantidad'
        );
        
        -- Validar que todos los productos existen en la compra
        IF EXISTS (
            SELECT 1 FROM #ProductosDevolucion pd
            WHERE NOT EXISTS (
                SELECT 1 
                FROM detalle_compra dc
                INNER JOIN producto p ON dc.id_producto = p.id_producto
                INNER JOIN esquema_producto ep ON p.id_esquema_producto = ep.id_esquema_producto
                WHERE dc.id_compra = @id_compra
                AND ep.nombre_producto = pd.nombre_producto
                AND dc.estado = 'A'
            )
        )
        BEGIN
            INSERT INTO @MensajesResultado
            SELECT 'Error: El producto "' + pd.nombre_producto + '" no existe en la compra especificada'
            FROM #ProductosDevolucion pd
            WHERE NOT EXISTS (
                SELECT 1 
                FROM detalle_compra dc
                INNER JOIN producto p ON dc.id_producto = p.id_producto
                INNER JOIN esquema_producto ep ON p.id_esquema_producto = ep.id_esquema_producto
                WHERE dc.id_compra = @id_compra
                AND ep.nombre_producto = pd.nombre_producto
                AND dc.estado = 'A'
            );
            
            SET @ErrorCount = @ErrorCount + 1;
        END
        
        -- Validar stock disponible
        IF EXISTS (
            SELECT 1 FROM #ProductosDevolucion pd
            INNER JOIN (
                SELECT 
                    ep.nombre_producto,
                    p.id_producto,
                    p.stock
                FROM 
                    detalle_compra dc
                    INNER JOIN producto p ON dc.id_producto = p.id_producto
                    INNER JOIN esquema_producto ep ON p.id_esquema_producto = ep.id_esquema_producto
                WHERE 
                    dc.id_compra = @id_compra
                    AND dc.estado = 'A'
            ) cp ON pd.nombre_producto = cp.nombre_producto
            WHERE pd.cantidad_devolver > cp.stock
        )
        BEGIN
            INSERT INTO @MensajesResultado
            SELECT 'Error: No hay suficiente stock para devolver ' + CAST(pd.cantidad_devolver AS NVARCHAR) + 
                   ' unidades de "' + pd.nombre_producto + '". Stock actual: ' + CAST(cp.stock AS NVARCHAR)
            FROM #ProductosDevolucion pd
            INNER JOIN (
                SELECT 
                    ep.nombre_producto,
                    p.id_producto,
                    p.stock
                FROM 
                    detalle_compra dc
                    INNER JOIN producto p ON dc.id_producto = p.id_producto
                    INNER JOIN esquema_producto ep ON p.id_esquema_producto = ep.id_esquema_producto
                WHERE 
                    dc.id_compra = @id_compra
                    AND dc.estado = 'A'
            ) cp ON pd.nombre_producto = cp.nombre_producto
            WHERE pd.cantidad_devolver > cp.stock;
            
            SET @ErrorCount = @ErrorCount + 1;
        END
        
        -- Si hay errores, mostrar y salir
        IF @ErrorCount > 0
        BEGIN
            SELECT * FROM @MensajesResultado;
            RETURN;
        END
        
        BEGIN TRANSACTION;
        
        -- Registrar la devolución (cabecera)
        INSERT INTO devolucion (fecha_devolucion, estado)
        VALUES (GETDATE(), 'A');
        
        SET @id_devolucion = SCOPE_IDENTITY();
        
        -- Registrar detalles de devolución para cada producto
        INSERT INTO detalle_devolucion (
            cantidad, 
            costo, 
            id_producto, 
            id_devolucion
        )
        SELECT 
            pd.cantidad_devolver,
            dc.costo,
            p.id_producto,
            @id_devolucion
        FROM 
            #ProductosDevolucion pd
            INNER JOIN esquema_producto ep ON pd.nombre_producto = ep.nombre_producto
            INNER JOIN producto p ON ep.id_esquema_producto = p.id_esquema_producto
            INNER JOIN detalle_compra dc ON p.id_producto = dc.id_producto AND dc.id_compra = @id_compra
        WHERE 
            dc.estado = 'A';
        
        -- Actualizar stock para cada producto
        UPDATE p
        SET stock = stock - pd.cantidad_devolver
        FROM 
            producto p
            INNER JOIN esquema_producto ep ON p.id_esquema_producto = ep.id_esquema_producto
            INNER JOIN #ProductosDevolucion pd ON ep.nombre_producto = pd.nombre_producto;
        
        COMMIT TRANSACTION;
        
        -- Mensaje de éxito
        INSERT INTO @MensajesResultado
        VALUES ('Devolución registrada exitosamente. ID: ' + CAST(@id_devolucion AS NVARCHAR));
        
        -- Detalle de productos devueltos
        INSERT INTO @MensajesResultado
        SELECT 'Producto: ' + pd.nombre_producto + ' - Cantidad: ' + CAST(pd.cantidad_devolver AS NVARCHAR) + 
               ' - Nuevo stock: ' + CAST(p.stock AS NVARCHAR)
        FROM 
            #ProductosDevolucion pd
            INNER JOIN esquema_producto ep ON pd.nombre_producto = ep.nombre_producto
            INNER JOIN producto p ON ep.id_esquema_producto = p.id_esquema_producto;
        
        SELECT * FROM @MensajesResultado;
            
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
            
        INSERT INTO @MensajesResultado
        VALUES ('Error: ' + ERROR_MESSAGE());
        
        SELECT * FROM @MensajesResultado;
    END CATCH
    
    -- Limpiar tabla temporal
    IF OBJECT_ID('tempdb..#ProductosDevolucion') IS NOT NULL
        DROP TABLE #ProductosDevolucion;
END
////////////////// PARA PROBAR FUNCIONAMIENTO ///////////////////////////////
DECLARE @ProductosJSON NVARCHAR(MAX) =                                 
'[                                                                     
    {"nombre_producto": "Arroz Premium", "cantidad": 1},                
    {"nombre_producto": "Frijol Blanco", "cantidad": 2}                
]';                                                                     
                                                                        
EXEC sp_RegistrarDevolucion                                                 
    @id_compra = 5,
    @ProductosDevolver = @ProductosJSON;
//////////////////////////////////////////////////////////////////////////


------PROCEDIMIENTO PEDIDOS-------------
CREATE TYPE DetallePedidoType AS TABLE (
    cantidad INT NULL,
    costo NUMERIC(12,2) NULL,
    codigo_producto NVARCHAR(15) NULL,
    id_pedido INT NULL,
    estado CHAR(1) NULL
);


CREATE OR ALTER PROCEDURE sp_InsertarPedidoConDetalles
    @DetallesPedido DetallePedidoType READONLY
AS
BEGIN
    SET NOCOUNT ON;

    -- Crear tabla temporal
    CREATE TABLE #TempDetallePedido (
        cantidad INT,
        costo NUMERIC(12,2),
        codigo_producto NVARCHAR(15),
        id_pedido INT,
        estado CHAR(1)
    );

    -- Insertar datos en la tabla temporal
    INSERT INTO #TempDetallePedido (cantidad, costo, codigo_producto, id_pedido, estado)
    SELECT cantidad, costo, codigo_producto, id_pedido, estado
    FROM @DetallesPedido;

    -- Insertar el pedido y obtener su ID
    DECLARE @NuevoPedidoID INT;
    
    INSERT INTO pedido (fecha_pedido, estado)
    VALUES (GETDATE(), 'A');

    SET @NuevoPedidoID = SCOPE_IDENTITY(); -- Obtiene el último ID insertado

    -- Insertar los detalles con el ID del nuevo pedido
    INSERT INTO detalle_pedido (cantidad, costo, id_producto, id_pedido, estado)
    SELECT d.cantidad, d.costo, p.id_producto, @NuevoPedidoID, d.estado
    FROM #TempDetallePedido d
    JOIN producto p ON p.id_esquema_producto = (
        SELECT id_esquema_producto FROM esquema_producto WHERE codigo_producto = d.codigo_producto
    );

    -- Eliminar tabla temporal
    DROP TABLE #TempDetallePedido;
END;

------------PROCEDIMIENTO REGISTRAR COMPRAS-------------
DROP TYPE IF EXISTS TipoProductos;
GO

create TYPE TipoProductos AS TABLE
(
    IdEsquemaProducto INT,
    Lote NVARCHAR(50),
    Fabricante NVARCHAR(100),
    FechaFabricacion DATETIME,
    FechaVencimiento DATETIME,
    IdPresentacion INT,
    Cantidad INT,
    Costo NUMERIC(12,2),
    IdEstanteria INT
);

CREATE OR ALTER PROCEDURE sp_RegistrarCompra
    @FechaCompra DATETIME,
    @IdTipoCompra INT,
    @IdProveedor INT,
    @Productos TipoProductos READONLY,
    @IdEmpresa INT
AS
BEGIN
    DECLARE @IdCompra INT;
    DECLARE @IdLote INT;
    DECLARE @IdProducto INT;
    DECLARE @IdEsquemaProducto INT;
    DECLARE @Lote NVARCHAR(50);
    DECLARE @Fabricante NVARCHAR(100);
    DECLARE @FechaFabricacion DATETIME;
    DECLARE @FechaVencimiento DATETIME;
    DECLARE @IdPresentacion INT;
    DECLARE @Cantidad INT;
    DECLARE @Costo NUMERIC(12,2);
    DECLARE @Precio NUMERIC(12,2);
    DECLARE @IdEstanteria INT; 

    BEGIN TRANSACTION;

    BEGIN TRY
        INSERT INTO compra (id_tipo_compra, fecha_compra, estado)
        VALUES (@IdTipoCompra, @FechaCompra, 'A');
        
        SET @IdCompra = SCOPE_IDENTITY();
        
        DECLARE producto_cursor CURSOR FOR
        SELECT IdEsquemaProducto, Lote, Fabricante, FechaFabricacion, FechaVencimiento, IdPresentacion, Cantidad, Costo, IdEstanteria
        FROM @Productos;

        OPEN producto_cursor;
        FETCH NEXT FROM producto_cursor INTO
            @IdEsquemaProducto, @Lote, @Fabricante, @FechaFabricacion, @FechaVencimiento, @IdPresentacion, @Cantidad, @Costo, @IdEstanteria;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @Precio = @Costo * 1.30;

            INSERT INTO lote (lote, fabricante, fecha_fabricacion, fecha_vencimiento, estado)
            VALUES (@Lote, @Fabricante, @FechaFabricacion, @FechaVencimiento, 'A');

            SET @IdLote = SCOPE_IDENTITY();

            INSERT INTO producto (id_esquema_producto, precio, costo, stock, id_lote, id_proveedor, id_presentacion, id_estanteria, estado, fecha_registro, id_empresa)
            VALUES (@IdEsquemaProducto, @Precio, @Costo, @Cantidad, @IdLote, @IdProveedor, @IdPresentacion, @IdEstanteria, 'A', GETDATE(), @IdEmpresa);

            SET @IdProducto = SCOPE_IDENTITY();

            INSERT INTO detalle_compra (cantidad, costo, id_producto, id_compra, estado)
            VALUES (@Cantidad, @Costo, @IdProducto, @IdCompra, 'A');

            FETCH NEXT FROM producto_cursor INTO
                @IdEsquemaProducto, @Lote, @Fabricante, @FechaFabricacion, @FechaVencimiento, @IdPresentacion, @Cantidad, @Costo, @IdEstanteria;
        END

        CLOSE producto_cursor;
        DEALLOCATE producto_cursor;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END;


--------------------------------------------- isaac proveedor 

CREATE PROCEDURE sp_Insert_Proveedor
    @nombre_proveedor NVARCHAR(100),
    @nit NVARCHAR(15),
    @correo NVARCHAR(100),
	@telefono NVARCHAR(16),
	@direccion NVARCHAR(100)
AS
BEGIN
    INSERT INTO proveedor (nombre_proveedor, nit, correo, telefono, direccion,estado)
    VALUES (@nombre_proveedor, @nit, @correo, @telefono, @direccion,'A')
END

select * from proveedor

--------------------------------------------- isaac proveedor 
-- actualizart proveedor
CREATE PROCEDURE sp_actualizar_proveedor
    @id_proveedor INT,
    @nombre_proveedor NVARCHAR(100),
    @nit NVARCHAR(15),
    @correo NVARCHAR(100),
	@telefono NVARCHAR(16),
	@direccion NVARCHAR(100)

AS
BEGIN
    IF EXISTS (SELECT 1 FROM proveedor WHERE id_proveedor = @id_proveedor)
    BEGIN
        UPDATE proveedor
        SET
            nombre_proveedor = @nombre_proveedor,
            nit = @nit,
            correo = @correo,
            telefono = @telefono,
            direccion = @direccion
        WHERE id_proveedor = @id_proveedor;
    END
    ELSE
    BEGIN
        RAISERROR('Proveedor no encontrado.', 16, 1);
    END
END

--------------------------------------------- isaac proveedor 
-- cambiar estado 
CREATE PROCEDURE sp_cambiarEstadoProveedor
    @id_proveedor INT
AS
BEGIN
    UPDATE proveedor
    SET estado = 'I'
    WHERE id_proveedor = @id_proveedor;
END

<<<<<<< HEAD
--isaac tipo_compra --------------------------------------------

CREATE PROCEDURE sp_Insert_Tipo_Compra
    @nombre_tipo_compra NVARCHAR(150)
AS
BEGIN
    INSERT INTO tipo_compra (nombre_tipo_compra,estado)
    VALUES (@nombre_tipo_compra,'A')
END

--isaac tipo_compra --------------------------------------------

CREATE PROCEDURE sp_actualizar_Tipo_Compra
    @id_tipo_compra INT,
    @nombre_tipo_compra NVARCHAR(50)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM tipo_compra WHERE id_tipo_compra = @id_tipo_compra)
    BEGIN
        UPDATE tipo_compra
        SET
            nombre_tipo_compra = @nombre_tipo_compra
        WHERE id_tipo_compra = @id_tipo_compra;
    END
    ELSE
    BEGIN
        RAISERROR('Tipo Compra no encontrado.', 16, 1);
    END
END

--isaac tipo_compra --------------------------------------------

CREATE PROCEDURE sp_cambiarEstadoTipo_Compra
    @id_tipo_compra INT
AS
BEGIN
    UPDATE tipo_compra
    SET estado = 'I'
    WHERE id_tipo_compra = @id_tipo_compra;
END

--isaac tipo_inventario  inserts--------------------------------------------

CREATE PROCEDURE sp_Insert_Tipo_Inventario
    @nombre_tipo_inventario NVARCHAR(150)
AS
BEGIN
    INSERT INTO tipo_inventario (nombre_tipo_inventario,estado)
    VALUES (@nombre_tipo_inventario,'A')
END

--isaac tipo_inventario actializar --------------------------------------------

CREATE PROCEDURE sp_actualizar_Tipo_Inventario
    @id_tipo_inventario INT,
    @nombre_tipo_inventario NVARCHAR(50)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM tipo_inventario WHERE id_tipo_inventario = @id_tipo_inventario)
    BEGIN
        UPDATE tipo_inventario
        SET
            nombre_tipo_inventario = @nombre_tipo_inventario
        WHERE id_tipo_inventario = @id_tipo_inventario;
    END
    ELSE
    BEGIN
        RAISERROR('Tipo Inventario no encontrado.', 16, 1);
    END
END

--isaac tipo_inventario cambiar estado --------------------------------------------

CREATE PROCEDURE sp_cambiarEstadoTipo_Inventario
    @id_tipo_inventario INT
AS
BEGIN
    UPDATE tipo_inventario
    SET estado = 'I'
    WHERE id_tipo_inventario = @id_tipo_inventario;
END

--isaac tipo_cliente  inserts--------------------------------------------

CREATE PROCEDURE sp_Insert_Tipo_Cliente
    @descuento FLOAT,
	@nombre_tipo_cliente NVARCHAR(150)
AS
BEGIN
    INSERT INTO tipo_cliente (nombre_tipo_cliente,descuento,estado)
    VALUES (@nombre_tipo_cliente,@descuento,'A')
END

--isaac tipo_cliente actializar --------------------------------------------

CREATE PROCEDURE sp_actualizar_Tipo_Cliente
    @id_tipo_cliente INT,
    @nombre_tipo_cliente NVARCHAR(50),
	@descuento FLOAT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM tipo_cliente WHERE id_tipo_cliente = @id_tipo_cliente)
    BEGIN
        UPDATE tipo_cliente
        SET
            nombre_tipo_cliente = @nombre_tipo_cliente,
			descuento = @descuento
        WHERE id_tipo_cliente = @id_tipo_cliente;
    END
    ELSE
    BEGIN
        RAISERROR('Tipo cliente no encontrado.', 16, 1);
    END
END

--isaac tipo_inventario cambiar estado --------------------------------------------

CREATE PROCEDURE sp_cambiarEstadoTipo_Cliente
    @id_tipo_cliente INT
AS
BEGIN
    UPDATE tipo_cliente
    SET estado = 'I'
    WHERE id_tipo_cliente = @id_tipo_cliente;
END

-- isaac Cleinte Insertar -------------------------------------------------

CREATE PROCEDURE sp_Insert_Cliente
 	@id_tipo_cliente INT ,   
	@nombre_cliente NVARCHAR(100),
	@dpi NVARCHAR(15),
    @nit NVARCHAR(15),
	@telefono NVARCHAR(16),
	@correo NVARCHAR(100)
AS
BEGIN
    INSERT INTO cliente (id_tipo_cliente, nombre_cliente, dpi, nit, telefono, correo, estado)
    VALUES (@id_tipo_cliente, @nombre_cliente, @dpi, @nit, @telefono, @correo,'A')
END

-- isaac Cleinte Actualizar -------------------------------------------------

CREATE PROCEDURE sp_actualizar_Cliente
    @id_cliente INT,
	@id_tipo_cliente INT,   
	@nombre_cliente NVARCHAR(100),
	@dpi NVARCHAR(15),
    @nit NVARCHAR(15),
	@telefono NVARCHAR(16),
	@correo NVARCHAR(100)

AS
BEGIN
    IF EXISTS (SELECT 1 FROM cliente WHERE id_cliente = @id_cliente)
    BEGIN
        UPDATE cliente
        SET
            id_tipo_cliente = @id_tipo_cliente,
			nombre_cliente = @nombre_cliente,
			dpi = @dpi,
            nit = @nit,
			telefono = @telefono,
            correo = @correo
        WHERE id_cliente = @id_cliente;
    END
    ELSE
    BEGIN
        RAISERROR('Cliente no encontrado.', 16, 1);
    END
END

-- isaac Cleinte Cambiar_Estado -------------------------------------------------

CREATE PROCEDURE sp_cambiarEstado_Cliente
    @id_cliente INT
AS
BEGIN
    UPDATE cliente
    SET estado = 'I'
    WHERE id_cliente = @id_cliente;
END
=======
-------------------------------------------- anular compra
CREATE or ALTER PROCEDURE sp_anularCompra
    @id_compra INT
AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (SELECT 1 FROM compra WHERE id_compra = @id_compra AND estado = 'A')
    BEGIN
        -- Cambiar estado de la compra
        UPDATE compra
        SET estado = 'I'
        WHERE id_compra = @id_compra;

        -- Cambiar estado de los detalles de compra
        UPDATE detalle_compra
        SET estado = 'I'
        WHERE id_compra = @id_compra;

        -- Revertir stock de los productos
        UPDATE producto
        SET stock = stock - dc.cantidad
        FROM producto p
        INNER JOIN detalle_compra dc ON p.id_producto = dc.id_producto
        WHERE dc.id_compra = @id_compra;

        -- Inactivar productos relacionados a esta compra
        UPDATE producto
        SET estado = 'I'
        WHERE id_producto IN (
            SELECT id_producto
            FROM detalle_compra
            WHERE id_compra = @id_compra
        );

        -- Inactivar lotes relacionados a los productos de esta compra
        UPDATE lote
        SET estado = 'I'
        WHERE id_lote IN (
            SELECT p.id_lote
            FROM producto p
            INNER JOIN detalle_compra dc ON p.id_producto = dc.id_producto
            WHERE dc.id_compra = @id_compra
        );

        PRINT 'Compra y elementos relacionados anulados correctamente.';
    END
    ELSE
    BEGIN
        PRINT 'La compra no existe o ya está anulada.';
    END
END;
>>>>>>> 701b7b9d4f7cce2af03047f9ac0d959042d6205e
